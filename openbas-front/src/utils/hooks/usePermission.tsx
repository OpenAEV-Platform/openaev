import {createContext, ReactNode, useEffect, useState} from "react";import {User} from "../api-types";type PermissionsContextType = {    can: (action: string) => boolean;};type Capabilities = (    | "BYPASS"    | "ACCESS_ATOMIC_TESTING"    | "MANAGE_ATOMIC_TESTING"    | "DELETE_ATOMIC_TESTING"    | "LAUNCH_ATOMIC_TESTING"    | "MANAGE_TEAMS_AND_PLAYERS"    | "DELETE_TEAMS_AND_PLAYERS"    | "ACCESS_ASSETS"    | "MANAGE_ASSETS"    | "DELETE_ASSETS"    | "ACCESS_PAYLOADS"    | "MANAGE_PAYLOADS"    | "DELETE_PAYLOADS"    | "ACCESS_DASHBOARDS"    | "MANAGE_DASHBOARDS"    | "DELETE_DASHBOARDS"    | "ACCESS_FINDINGS"    | "MANAGE_FINDINGS"    | "DELETE_FINDINGS"    | "ACCESS_DOCUMENTS"    | "MANAGE_DOCUMENTS"    | "DELETE_DOCUMENTS"    | "ACCESS_CHANNELS"    | "MANAGE_CHANNELS"    | "DELETE_CHANNELS"    | "ACCESS_CHALLENGES"    | "MANAGE_CHALLENGES"    | "DELETE_CHALLENGES"    | "ACCESS_LESSONS_LEARNED"    | "MANAGE_LESSONS_LEARNED"    | "DELETE_LESSONS_LEARNED"    | "ACCESS_SECURITY_PLATFORMS"    | "MANAGE_SECURITY_PLATFORMS"    | "DELETE_SECURITY_PLATFORMS"    | "ACCESS_PLATFORM_SETTINGS"    | "MANAGE_PLATFORM_SETTINGS")[];const PermissionsContext = createContext<PermissionsContextType | null>(null);export const PermissionsProvider = ({ children, user }: {children: ReactNode, user: User }) => {    const [userCapabilities, setUserCapabilities]=useState<Capabilities | undefined >(undefined);    useEffect(() => {        setUserCapabilities(user.user_capabilities);    }, []);    const can = (action: string)=>{        return true;    }    return (        <PermissionsContext.Provider value={{ can }}>            {children}        </PermissionsContext.Provider>    );}