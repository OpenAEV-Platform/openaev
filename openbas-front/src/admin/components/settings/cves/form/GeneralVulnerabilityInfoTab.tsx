import { Divider, List, ListItem, Stack, Typography } from '@mui/material';
import { useTheme } from '@mui/material/styles';
import { useEffect, useState } from 'react';

import { fetchCve } from '../../../../../actions/cve-actions';
import CVSSBadge from '../../../../../components/CvssBadge';
import { useFormatter } from '../../../../../components/i18n';
import Loader from '../../../../../components/Loader';
import type { CveOutput, CweOutput, FindingOutput } from '../../../../../utils/api-types';

interface Props {
  finding: FindingOutput;
  onCvssScore?: (score: number) => void;
}

const GeneralVulnerabilityInfoTab = ({ finding, onCvssScore }: Props) => {
  const { fldt, t } = useFormatter();
  const theme = useTheme();
  const [cve, setCve] = useState<CveOutput | null>(null);
  const [loading, setLoading] = useState(true);
  const [notAvailable, setNotAvailable] = useState(false);

  useEffect(() => {
    if (!finding.finding_value) return;

    if (finding.finding_value) {
      setLoading(true);
      setNotAvailable(false);

      fetchCve(finding.finding_value)
        .then((res) => {
          setCve(res.data);
          if (onCvssScore && res.data) {
            onCvssScore(res.data.cve_cvss);
          }
        })
        .catch(() => {
          setNotAvailable(true);
        })
        .finally(() => {
          setLoading(false);
        });
    }
  }, [finding]);

  if (loading) return <Loader />;

  if (notAvailable) {
    return (
      <div style={{ padding: theme.spacing(2, 1, 0, 0) }}>
        <Typography>{t('There is no information about this CVE yet.')}</Typography>
      </div>
    );
  }

  return (
    <div style={{ padding: theme.spacing(2, 1, 0, 0) }}>
      {/* CVE Id */}
      <Typography variant="subtitle1" gutterBottom>
        {cve?.cve_id ?? t('Unknown CVE')}
      </Typography>

      {/* Description */}
      <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
        {t('Description')}
      </Typography>
      <Typography variant="body2">
        {cve?.cve_description ?? t('No description available.')}
      </Typography>
      <Divider sx={{ my: theme.spacing(2) }} />

      {/* Quick Info */}
      <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
        {t('Quick Info')}
      </Typography>
      <Stack spacing={1}>
        <Typography variant="body2">
          <strong>
            {t('Published')}
            :
          </strong>
          {' '}
          {cve?.cve_published ? fldt(cve.cve_published) : t('N/A')}
        </Typography>
        <Typography variant="body2">
          <strong>
            {t('Source')}
            :
          </strong>
          {' '}
          {cve?.cve_source_identifier ?? t('N/A')}
        </Typography>
      </Stack>
      <Divider sx={{ my: theme.spacing(2) }} />

      {/* Metrics */}
      <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
        {t('Metrics')}
      </Typography>
      {cve?.cve_cvss && <CVSSBadge score={cve?.cve_cvss} />}
      <Divider sx={{ my: theme.spacing(2) }} />

      {/* References */}
      <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
        {t('References to Advisories, Solutions, and Tools')}
      </Typography>
      <List dense>
        {cve?.cve_reference_urls?.length ? (
          cve.cve_reference_urls.map((url, index) => (
            <ListItem key={index}>
              <a href={url} target="_blank" rel="noopener noreferrer">
                {url}
              </a>
            </ListItem>
          ))
        ) : (
          <ListItem>{t('No references available.')}</ListItem>
        )}
      </List>
      <Divider sx={{ my: theme.spacing(2) }} />

      {/* CISA */}
      <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
        {t('CISA\'s Known Exploited Vulnerabilities Catalog')}
      </Typography>
      <Stack spacing={1}>
        <Typography variant="body2">
          <strong>
            {t('Vulnerability Name')}
            :
          </strong>
          {' '}
          {cve?.cve_cisa_vulnerability_name ?? t('N/A')}
        </Typography>
        <Typography variant="body2">
          <strong>
            {t('Date Added')}
            :
          </strong>
          {' '}
          {cve?.cve_cisa_exploit_add ? fldt(cve.cve_cisa_exploit_add) : t('N/A')}
        </Typography>
        <Typography variant="body2">
          <strong>
            {t('Due Date')}
            :
          </strong>
          {' '}
          {cve?.cve_cisa_action_due ? fldt(cve.cve_cisa_action_due) : t('N/A')}
        </Typography>
        <Typography variant="body2">
          <strong>
            {t('Required Action')}
            :
          </strong>
          {' '}
          {cve?.cve_cisa_required_action ?? t('N/A')}
        </Typography>
      </Stack>
      <Divider sx={{ my: theme.spacing(2) }} />

      {/* CWE */}
      <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
        {t('Weakness Enumeration')}
      </Typography>
      <Stack spacing={1}>
        {cve?.cve_cwes?.length ? (
          cve.cve_cwes.map((cwe: CweOutput) => (
            <Typography key={cwe.cwe_id} variant="body2">
              {cwe.cwe_id}
            </Typography>
          ))
        ) : (
          <Typography variant="body2">{t('No CWEs listed.')}</Typography>
        )}
      </Stack>
    </div>
  );
};

export default GeneralVulnerabilityInfoTab;
